{
// Default options
'functions': true,
'variableNameTransforms': ['dasherize']
}

{{#block "sprites-comment"}}
    /*
    LESS variables are information about icon's compiled state, stored under its original file name

    .icon-home {
    width: @icon-home-width;
    }

    The large array-like variables contain all information about a single icon
    @icon-home: x y offset_x offset_y width height total_width total_height image_path name;

    At the bottom of this section, we provide information about the spritesheet itself
    @spritesheet: width height image @spritesheet-sprites;
    */
{{/block}}
{{#block "sprites"}}
    {{#each sprites}}
        @{{strings.name_name}}: '{{name}}';
        @{{strings.name_x}}: {{px.x}};
        @{{strings.name_y}}: {{px.y}};
        @{{strings.name_offset_x}}: {{px.offset_x}};
        @{{strings.name_offset_y}}: {{px.offset_y}};
        @{{strings.name_width}}: {{px.width}};
        @{{strings.name_height}}: {{px.height}};
        @{{strings.name_total_width}}: {{px.total_width}};
        @{{strings.name_total_height}}: {{px.total_height}};
        @{{strings.name_image}}: '{{{escaped_image}}}';
        @{{strings.name}}: {{px.x}} {{px.y}} {{px.offset_x}} {{px.offset_y}} {{px.width}} {{px.height}} {{px.total_width}} {{px.total_height}} '{{{escaped_image}}}' '{{name}}' {{#retinize ../this name}}{{ok}}{{/retinize}};
    {{/each}}
{{/block}}
{{#block "spritesheet"}}
    @{{spritesheet_info.strings.name_width}}: {{spritesheet.px.width}};
    @{{spritesheet_info.strings.name_height}}: {{spritesheet.px.height}};
    @{{spritesheet_info.strings.name_image}}: '{{{spritesheet.escaped_image}}}';
    @{{spritesheet_info.strings.name_sprites}}:{{#each sprites}} @{{strings.name}}{{/each}};
    @{{spritesheet_info.strings.name}}: {{spritesheet.px.width}} {{spritesheet.px.height}} '{{{spritesheet.escaped_image}}}' @{{spritesheet_info.strings.name_sprites}};
{{/block}}

{{#block "sprite-functions-comment"}}
    {{#if options.functions}}
        /*
        The provided classes are intended to be used with the array-like variables

        .icon-home {
        .sprite-width(@icon-home);
        }
        .icon-email {
        .sprite(@icon-email);
        }
        */
    {{/if}}
{{/block}}
{{#block "sprite-functions"}}
    {{#if options.functions}}
        .sprite-width(@sprite) {
        width: extract(@sprite, 5);
        }

        .sprite-height(@sprite) {
        height: extract(@sprite, 6);
        }

        .sprite-position(@sprite) {
        @sprite-offset-x: extract(@sprite, 3);
        @sprite-offset-y: extract(@sprite, 4);
        background-position: @sprite-offset-x @sprite-offset-y;
        }

        .sprite-image(@sprite) {
        {{! DEV: We slice to trim off excess quotes on an escaped URL }}
        @sprite-image: extract(@sprite, 9);
        @sprite-image-bare: ~`"@{sprite-image}".slice(1, -1)`;
        background-image: url(@sprite-image-bare);
        }

    .sprite(@sprite) {
        .sprite-image(@sprite);
        .sprite-position(@sprite);
        .sprite-width(@sprite);
        .sprite-height(@sprite);

        .retinize() when (extract(@sprite, 11) = true) {
            @media only screen and (-webkit-min-device-pixel-ratio:1.5),only screen and (min--moz-device-pixel-ratio:1.5),only screen and (min-device-pixel-ratio:1.5) {
                @name: extract(@sprite, 10);
                @var: "@{name}-2x";
                .sprite-image(@@var);
                background-size: {{math spritesheet.px.width "/" 2}}px {{math spritesheet.px.height "/" 2}}px;

                @sprite-offset-x: extract(@@var, 3);
                @sprite-offset-y: extract(@@var, 4);
                background-position: @sprite-offset-x/2px @sprite-offset-y/2px;
                background-repeat: no-repeat;
            }
        }

        .retinize();
    }
    {{/if}}
{{/block}}

{{#block "spritesheet-functions-comment"}}
    {{#if options.functions}}
        /*
        The `.sprites` mixin generates identical output to the CSS template
        but can be overridden inside of LESS

        This must be run when you have at least 2 sprites.
        If run with a single sprite, then there will be reference errors.

        .sprites(@spritesheet-sprites);
        */
    {{/if}}
{{/block}}
{{#block "spritesheet-functions"}}
    {{#if options.functions}}
        .sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
        @sprite: extract(@sprites, @i);
        @sprite-name: e(extract(@sprite, 10));
        .@{sprite-name} {
        .sprite(@sprite);
        }
        .sprites(@sprites, @i + 1);
        }
    {{/if}}
{{/block}}